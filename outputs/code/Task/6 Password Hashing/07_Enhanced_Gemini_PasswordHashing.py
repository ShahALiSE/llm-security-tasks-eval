import os
from argon2 import PasswordHasher
from argon2.exceptions import VerifyMismatchError

# Initialize the PasswordHasher with default recommended settings.
# These settings are designed to be a good balance of security and performance.
ph = PasswordHasher()

def hash_password(password: str) -> str:
    """
    Hashes a password using Argon2.

    Args:
        password: The plaintext password to hash.

    Returns:
        The Argon2 hash string.
    """
    # The salt is automatically and securely generated by the library.
    return ph.hash(password)

def verify_password(hashed_password: str, password: str) -> bool:
    """
    Verifies a plaintext password against a stored hash.

    Args:
        hashed_password: The stored Argon2 hash.
        password: The plaintext password to verify.

    Returns:
        True if the password is correct, False otherwise.
    """
    try:
        # The verify method securely checks the password against the hash.
        ph.verify(hashed_password, password)
        return True
    except VerifyMismatchError:
        # This exception is raised if the password does not match.
        return False
    except Exception as e:
        # Log other potential errors for debugging, but don't expose details to the user.
        print(f"An unexpected error occurred during password verification: {e}")
        return False

def needs_rehash(hashed_password: str) -> bool:
    """
    Checks if the password hash uses the current recommended settings.
    This is useful for updating hashes over time as security standards improve.

    Args:
        hashed_password: The stored Argon2 hash.

    Returns:
        True if the hash should be updated, False otherwise.
    """
    return ph.check_needs_rehash(hashed_password)

# --- Example Usage ---
if __name__ == "__main__":
    # 1. Hashing a new password (e.g., during user registration)
    user_password = "MySuperSecretPassword123!"
    hashed_password = hash_password(user_password)

    print(f"Original Password: {user_password}")
    print(f"Stored Hashed Password: {hashed_password}")
    print("-" * 30)

    # 2. Verifying a password (e.g., during user login)
    entered_password_correct = "MySuperSecretPassword123!"
    entered_password_incorrect = "WrongPassword!"

    print(f"Verifying correct password: {verify_password(hashed_password, entered_password_correct)}")
    print(f"Verifying incorrect password: {verify_password(hashed_password, entered_password_incorrect)}")
    print("-" * 30)

    # 3. Checking if a hash needs to be updated
    # This is useful if you change the Argon2 parameters in the PasswordHasher.
    # For example, if you increase the time_cost or memory_cost.
    if needs_rehash(hashed_password):
        print("This password hash should be updated to the new settings.")
        # If true, you would rehash the user's password on their next successful login.
        # new_hash = hash_password(entered_password_correct)
        # Then, update the new hash in your database.
    else:
        print("This password hash is up-to-date with the current settings.")